# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

resources:
  repositories:
  - repository: sonic-swss
    type: github
    name: Azure/sonic-swss
    endpoint: build

stages:
- stage: Build

  jobs:
  - job:
    displayName: "Python3"
    pool:
      vmImage: ubuntu-20.04

    container:
      image: sonicdev-microsoft.azurecr.io:443/sonic-slave-buster:latest

    steps:
    - task: DownloadPipelineArtifact@2
      inputs:
        source: specific
        project: build
        pipeline: 1
        artifact: sonic-buildimage.vs
        runVersion: 'latestFromBranch'
        runBranch: 'refs/heads/master'
      displayName: "Download artifacts from latest sonic-buildimage build"

    - script: |
        set -xe
        sudo dpkg -i libnl-3-200_*.deb
        sudo dpkg -i libnl-genl-3-200_*.deb
        sudo dpkg -i libnl-route-3-200_*.deb
        sudo dpkg -i libnl-nf-3-200_*.deb
        sudo dpkg -i libhiredis0.14_*.deb
        sudo dpkg -i libyang_1.0.73_amd64.deb
        sudo dpkg -i libyang-cpp_1.0.73_amd64.deb
        sudo dpkg -i python3-yang_1.0.73_amd64.deb
      workingDirectory: $(Pipeline.Workspace)/target/debs/buster/
      displayName: 'Install Debian dependencies'

    - task: DownloadPipelineArtifact@2
      inputs:
        source: specific
        project: build
        pipeline: 9
        artifact: sonic-swss-common
        runVersion: 'latestFromBranch'
        runBranch: 'refs/heads/master'
      displayName: "Download sonic swss common deb packages"

    - script: |
        set -xe
        sudo dpkg -i libswsscommon_1.0.0_amd64.deb
        sudo dpkg -i python3-swsscommon_1.0.0_amd64.deb
      workingDirectory: $(Pipeline.Workspace)/
      displayName: 'Install swss-common dependencies'

    - script: |
        set -xe
        sudo pip3 install swsssdk-2.0.1-py3-none-any.whl
        sudo pip3 install sonic_py_common-1.0-py3-none-any.whl
        sudo pip3 install sonic_config_engine-1.0-py3-none-any.whl
        sudo pip3 install sonic_platform_common-1.0-py3-none-any.whl
        sudo pip3 install sonic_yang_mgmt-1.0-py3-none-any.whl
        sudo pip3 install sonic_yang_models-1.0-py3-none-any.whl
      workingDirectory: $(Pipeline.Workspace)/target/python-wheels/
      displayName: 'Install Python dependencies'

    - script: |
        python3 setup.py test
      displayName: 'Test Python 3'

    - task: PublishTestResults@2
      inputs:
        testResultsFiles: '$(System.DefaultWorkingDirectory)/test-results.xml'
        testRunTitle: Python 3
        failTaskOnFailedTests: true
      condition: succeededOrFailed()
      displayName: 'Publish Python 3 test results'

    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: '$(System.DefaultWorkingDirectory)/coverage.xml'
        reportDirectory: '$(System.DefaultWorkingDirectory)/htmlcov/'
      displayName: 'Publish Python 3 test coverage'

    - script: |
        set -e
        python3 setup.py bdist_wheel
      displayName: 'Build Python 3 wheel'

    - publish: '$(System.DefaultWorkingDirectory)/dist/'
      artifact: wheels
      displayName: "Publish Python wheels"

- stage: BuildDocker
  dependsOn: Build
  condition: succeeded('Build')
  jobs:
  - template: .azure-pipelines/build-docker-sonic-vs-template.yml
    parameters:
      artifact_name: docker-sonic-vs

- stage: Test
  dependsOn: BuildDocker
  condition: succeeded('BuildDocker')
  jobs:
  - template: .azure-pipelines/test-docker-sonic-vs-template.yml
    parameters:
      log_artifact_name: log
